def is_safe(board, row, col, n):
    
    for i in range(row):
        if board[i][col] == 1:
            return False

    
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False

    return True

def solve_nqueens_incremental(board, row, n):
    if row >= n:
        print_board(board, n)
        return True

    res = False
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            res = solve_nqueens_incremental(board, row + 1, n) or res
            board[row][col] = 0  # Backtrack

    return res

def print_board(board, n):
    for row in board:
        print(' '.join('Q' if cell == 1 else '.' for cell in row))
    print("\n")

n = 8
board = [[0] * n for _ in range(n)]
solve_nqueens_incremental(board, 0, n)
